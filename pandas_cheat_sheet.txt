
# Pandas Cheat Sheet

## Basics

### Importing Pandas
```python
import pandas as pd
```

### Reading and Writing Data
- `pd.read_csv('filename.csv')`: Load data from a CSV file.
- `pd.read_excel('filename.xlsx')`: Load data from an Excel file.
- `df.to_csv('filename.csv')`: Save DataFrame to a CSV file.
- `df.to_excel('filename.xlsx')`: Save DataFrame to an Excel file.

## Data Structures

### Creating a DataFrame
```python
data = {'column1': [1, 2], 'column2': [3, 4]}
df = pd.DataFrame(data)
```

### Creating a Series
```python
s = pd.Series([1, 3, 5, 7])
```

## Viewing Data

- `df.head()`: View the first 5 rows of the DataFrame.
- `df.tail()`: View the last 5 rows.
- `df.shape`: Get the shape of the DataFrame (rows, columns).
- `df.info()`: Get a concise summary of the DataFrame.
- `df.describe()`: Generate descriptive statistics (mean, count, etc.).

## Selecting Data

### Selecting Columns
- `df['column']`: Select a column (returns a Series).
- `df[['col1', 'col2']]`: Select multiple columns.

### Selecting Rows
- `df.iloc[0]`: Select the first row by index.
- `df.loc[0]`: Select the row with index 0 by label.

### Slicing Data
- `df.iloc[0:3]`: Select the first 3 rows.
- `df.loc[0:3]`: Select rows with labels 0 to 3.

## Filtering Data

### Boolean Indexing
- `df[df['column'] > 10]`: Filter rows where the column value is greater than 10.
- `df[(df['col1'] > 10) & (df['col2'] < 5)]`: Apply multiple conditions.

## Handling Missing Data

- `df.isnull()`: Detect missing values.
- `df.dropna()`: Remove rows with missing data.
- `df.fillna(value)`: Fill missing data with a specified value.

## Data Manipulation

### Renaming Columns
- `df.rename(columns={'old_name': 'new_name'})`: Rename columns.

### Dropping Columns or Rows
- `df.drop('column', axis=1)`: Drop a column.
- `df.drop(0, axis=0)`: Drop a row by index.

### Sorting Data
- `df.sort_values('column')`: Sort DataFrame by column.

### Resetting Index
- `df.reset_index(drop=True)`: Reset the index of a DataFrame.

## Aggregating Data

### Grouping Data
- `df.groupby('column').mean()`: Group by column and calculate the mean.
- `df.groupby('column').sum()`: Group by column and calculate the sum.

### Statistical Functions
- `df.mean()`: Calculate the mean for each column.
- `df.median()`: Calculate the median.
- `df.min()`: Find the minimum value.
- `df.max()`: Find the maximum value.
- `df.std()`: Calculate the standard deviation.
- `df.var()`: Calculate variance.

## Merging and Joining Data

### Merging DataFrames
- `pd.merge(df1, df2, on='key_column')`: Merge two DataFrames on a key column.

### Joining DataFrames
- `df1.join(df2, on='key')`: Join DataFrames on key.

## Pivot Tables
- `df.pivot_table(values='col', index='col1', columns='col2')`: Create a pivot table.

## Handling Duplicates
- `df.duplicated()`: Find duplicate rows.
- `df.drop_duplicates()`: Remove duplicate rows.

## Reshaping Data

### Melting
- `pd.melt(df, id_vars=['col1'], value_vars=['col2', 'col3'])`: Unpivot a DataFrame.

### Concatenating
- `pd.concat([df1, df2])`: Concatenate DataFrames along a particular axis.

## Time Series Data

- `pd.to_datetime(df['column'])`: Convert a column to datetime.
- `df['column'].dt.year`: Extract the year from a datetime column.
- `df['column'].dt.month`: Extract the month.

## Advanced Operations

### Applying Functions
- `df['column'].apply(function)`: Apply a function to each element in a column.
- `df.applymap(function)`: Apply a function element-wise to a DataFrame.

### Window Functions
- `df.rolling(window=3).mean()`: Calculate the rolling mean.
- `df.expanding().sum()`: Calculate the cumulative sum.

## DataFrame Transformations

### Transposing DataFrame
- `df.T`: Transpose rows and columns.

### Vectorized Operations
- `df['column'] * 2`: Multiply all elements in a column by 2.
- `df + df2`: Add two DataFrames together.

## Data Export

- `df.to_csv('output.csv', index=False)`: Export DataFrame to a CSV file.
- `df.to_excel('output.xlsx', index=False)`: Export DataFrame to an Excel file.

